{"version":3,"file":"static/webpack/static\\development\\pages\\mypegs.js.a436ebbb7e3e6296e8c8.hot-update.js","sources":["webpack:///./components/OptionEditable.js"],"sourcesContent":["import React, { useState, useEffect, useReducer, useCallback } from 'react';\r\nimport ImageUpload from './ImageUpload';\r\nimport axios from 'axios';\r\nimport Dropzone from 'react-dropzone';\r\n\r\n\r\nconst OptionEditable = ({...props}) => {\r\n    const placeholderImage = 'https://apod.nasa.gov/apod/image/2001/22466-22467anaVantuyne900.jpg'\r\n    const placeholderName = 'add a name to this peg';\r\n    const { id } = props;\r\n    //TODO: useReducer?\r\n    const [image, setImage] = useState(placeholderImage)\r\n    const [pegName, setPegName] = useState(placeholderName);\r\n    //placeholder image\r\n    let pegNumberStr = id.toString();\r\n\r\n    pegNumberStr = id>99 ? pegNumberStr.slice(1) : pegNumberStr;\r\n\r\n    useEffect(() => {\r\n        get({ \"peg\": pegNumberStr })\r\n    }, [])\r\n\r\n    const url = 'http://localhost:8000/';\r\n\r\n    // #############\r\n    //CLOUDINARY UPLOAD\r\n    // #############\r\n    const cloudName = 'luisan';\r\n    const unsignedUploadPreset = 'jufwcv6o';\r\n    \r\n    // var fileSelect = document.getElementById(\"fileSelect\"),\r\n    // fileElem = document.getElementById(\"fileElem\");\r\n    // urlSelect = document.getElementById(\"urlSelect\");\r\n    \r\n    // fileSelect.addEventListener(\"click\", function(e) {\r\n    //     if (fileElem) {\r\n    //     fileElem.click();\r\n    // }\r\n    // e.preventDefault(); // prevent navigation to \"#\"\r\n    // }, false);\r\n    // const handleClick = (e) => {\r\n    //     if (fileElem) {\r\n    //         fileElem.click();\r\n    //     }\r\n    //     e.preventDefault();\r\n    // }\r\n\r\n// urlSelect.addEventListener(\"click\", function(e) {\r\n//     uploadFile('https://res.cloudinary.com/demo/image/upload/sample.jpg')\r\n//     e.preventDefault(); // prevent navigation to \"#\"\r\n// }, false);\r\n\r\n\r\n// ************************ Drag and drop ***************** //\r\n// function dragenter(e) {\r\n//     e.stopPropagation();\r\n//     e.preventDefault();\r\n// }\r\n\r\n// function dragover(e) {\r\n//     e.stopPropagation();\r\n//     e.preventDefault();\r\n// }\r\n\r\n// dropbox = document.getElementById(\"dropbox\");\r\n// dropbox.addEventListener(\"dragenter\", dragenter, false);\r\n// dropbox.addEventListener(\"dragover\", dragover, false);\r\n// dropbox.addEventListener(\"drop\", drop, false);\r\n\r\n// function drop(e) {\r\n//     e.stopPropagation();\r\n//     e.preventDefault();\r\n    \r\n//     var dt = e.dataTransfer;\r\n//     var files = dt.files;\r\n    \r\n//     handleFiles(files);\r\n// }\r\n\r\n// *********** Upload file to Cloudinary ******************** //\r\nfunction uploadFile(file) {\r\n    var url = `https://api.cloudinary.com/v1_1/${cloudName}/upload`;\r\n    var xhr = new XMLHttpRequest();\r\n    var fd = new FormData();\r\n    xhr.open('POST', url, true);\r\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\r\n    \r\n    // Reset the upload progress bar\r\n    document.getElementById('progress').style.width = 0;\r\n    \r\n    // Update progress (can be used to show progress indicator)\r\n    xhr.upload.addEventListener(\"progress\", function(e) {\r\n        var progress = Math.round((e.loaded * 100.0) / e.total);\r\n        document.getElementById('progress').style.width = progress + \"%\";\r\n        \r\n        console.log(`fileuploadprogress data.loaded: ${e.loaded},\r\n        data.total: ${e.total}`);\r\n    });\r\n    \r\n    xhr.onreadystatechange = function(e) {\r\n        if (xhr.readyState == 4 && xhr.status == 200) {\r\n            // File uploaded successfully\r\n            var response = JSON.parse(xhr.responseText);\r\n            // https://res.cloudinary.com/cloudName/image/upload/v1483481128/public_id.jpg\r\n            var url = response.secure_url;\r\n            // Create a thumbnail of the uploaded image, with 150px width\r\n            var tokens = url.split('/');\r\n            tokens.splice(-2, 0, 'w_150,c_scale');\r\n            var img = new Image(); // HTML5 Constructor\r\n            img.src = tokens.join('/');\r\n            img.alt = response.public_id;\r\n            document.getElementById('gallery').appendChild(img);\r\n        }\r\n    };\r\n    \r\n    fd.append('upload_preset', unsignedUploadPreset);\r\n    fd.append('tags', 'browser_upload'); // Optional - add tag for image admin in Cloudinary\r\n    fd.append('file', file);\r\n    xhr.send(fd);\r\n}\r\n\r\n// *********** Handle selected files ******************** //\r\nvar handleFiles = function(files) {\r\n    for (var i = 0; i < files.length; i++) {\r\n        uploadFile(files[i]); // call the function to upload the file\r\n    }\r\n};\r\n// #############\r\n//CLOUDINARY UPLOAD END\r\n// #############\r\n\r\n\r\n//TODO: refactor as HOCs / 'container component pattern'\r\n//TODO: use a container to handle the logic\r\nconst get = (data) => {\r\n    axios\r\n    .get(url+'getImageUrl', {\r\n        params: data\r\n    })\r\n    .then(res => {\r\n        setImage(res.data.data[0].imageURL ? res.data.data[0].imageURL : placeholderImage)\r\n                setPegName(res.data.data[0].pegName ? res.data.data[0].pegName : placeholderName)\r\n            })\r\n            .catch(err => {\r\n                // console.log(\"this is where it's at:\", err)\r\n            })\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        console.log(\"we'll post:\", pegName, \"for peg no.\", id);\r\n        const data = {\r\n            peg: id,\r\n            pegName: pegName,\r\n        }\r\n        axios\r\n            .put(url + 'updateData', data)\r\n            .then(res => {\r\n                console.log(\"put res:\", res);\r\n                get()\r\n                console.log('RAN GET');\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        console.log(e.target.value);\r\n        setPegName(e.target.value)\r\n    }\r\n\r\n    const uploadAcceptedFiles = (acceptedFiles) => {\r\n        console.log(acceptedFiles)\r\n        console.log(\"we'll run some axios call here to our server our cloudinary\");\r\n        // cloudinary.v2.uploader.upload(acceptedFiles, \r\n        //     function(error, result) {console.log(result, error)}\r\n        // );\r\n        handleFiles(acceptedFiles)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div class=\"option-card\" onPointerDown={() => \"\" }>\r\n                    <form\r\n                        onSubmit={e => { e.preventDefault(); e.target.blur(); }} \r\n                        onBlur={e => handleSubmit(e)}>\r\n                        <input\r\n                            type='text'\r\n                            onChange={(e) => handleChange(e)}\r\n                            name='pegName'\r\n                            value={pegName}\r\n                            />\r\n                    </form>\r\n                <img src={image} style={{height: '100px', width: '100px', border: '2px solid black', background: 'lightgray'}} />\r\n                <h4>{pegNumberStr}</h4>\r\n                <Dropzone onDrop={acceptedFiles => uploadAcceptedFiles(acceptedFiles)}>\r\n                    {({getRootProps, getInputProps}) => (\r\n                        <section>\r\n                        <div {...getRootProps()}>\r\n                            <input {...getInputProps()} />\r\n                            <p>Drag 'n' drop some files here, or click to select files</p>\r\n                        </div>\r\n                        </section>\r\n                    )}\r\n                </Dropzone>\r\n                {/* <ImageUpload peg={id} update={get} pegName={pegName} /> */}\r\n            </div>\r\n        </>\r\n        )\r\n}\r\n\r\nexport default OptionEditable"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAFA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAMA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AADA;AACA;AAEA;AADA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAaA;AACA;AACA;;;;A","sourceRoot":""}