{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nvar _jsxFileName = \"C:\\\\Users\\\\luisa\\\\OneDrive\\\\LuisAngel\\\\Code\\\\Memory Pegs\\\\memory-pegs-game\\\\components\\\\Options.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Option from './Option';\nimport ImageUpload from './ImageUpload'; //TODO: destructure here\n\nconst Options = (_ref) => {\n  let props = _Object$assign({}, _ref);\n\n  const {\n    optionsAmount,\n    answer,\n    sendAnswer,\n    setNewOptions\n  } = props;\n  let {\n    newOptions\n  } = props;\n  const {\n    0: options,\n    1: setOptions\n  } = useState([]);\n  useEffect(() => {\n    setOptions(createOptions(optionsAmount));\n    setNewOptions(false);\n  }, [newOptions]);\n\n  const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n\n  const createOptions = optionsAmount => {\n    console.log('CREATE OPTIONS');\n    let options = [];\n    let randomNumber = Math.round(Math.random() * 110);\n\n    for (let i = 0; i < optionsAmount - 1; i++) {\n      do {\n        randomNumber = Math.round(Math.random() * 110);\n      } while (randomNumber === answer);\n\n      options.push(__jsx(Option, {\n        id: randomNumber,\n        answer: randomNumber,\n        sendAnswer: sendAnswer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }));\n    }\n\n    options.push(__jsx(Option, {\n      id: answer,\n      answer: answer,\n      sendAnswer: sendAnswer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }));\n    shuffleArray(options); //shuffle options order\n\n    return options;\n  };\n\n  console.log(\"OPTIONS is Rendering\");\n  return __jsx(React.Fragment, null, options);\n};\n\nexport default Options;","map":{"version":3,"sources":["C:/Users/luisa/OneDrive/LuisAngel/Code/Memory Pegs/memory-pegs-game/components/Options.js"],"names":["React","useEffect","useState","Option","ImageUpload","Options","props","optionsAmount","answer","sendAnswer","setNewOptions","newOptions","options","setOptions","createOptions","shuffleArray","array","i","length","j","Math","floor","random","console","log","randomNumber","round","push"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CAEA;;AACA,MAAMC,OAAO,GAAG,UAAgB;AAAA,MAAXC,KAAW;;AAC5B,QAAM;AAACC,IAAAA,aAAD;AAAgBC,IAAAA,MAAhB;AAAwBC,IAAAA,UAAxB;AAAoCC,IAAAA;AAApC,MAAqDJ,KAA3D;AACA,MAAI;AAACK,IAAAA;AAAD,MAAeL,KAAnB;AACA,QAAM;AAAA,OAACM,OAAD;AAAA,OAAUC;AAAV,MAAwBX,QAAQ,CAAC,EAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,UAAU,CAACC,aAAa,CAACP,aAAD,CAAd,CAAV;AACAG,IAAAA,aAAa,CAAC,KAAD,CAAb;AACH,GAHQ,EAGN,CAACC,UAAD,CAHM,CAAT;;AAKA,QAAMI,YAAY,GAAIC,KAAD,IAAW;AAC5B,SAAK,IAAIC,CAAC,GAAGD,KAAK,CAACE,MAAN,GAAe,CAA5B,EAA+BD,CAAC,GAAG,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACvC,YAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAV;AACA,OAACD,KAAK,CAACC,CAAD,CAAN,EAAWD,KAAK,CAACG,CAAD,CAAhB,IAAuB,CAACH,KAAK,CAACG,CAAD,CAAN,EAAWH,KAAK,CAACC,CAAD,CAAhB,CAAvB;AACH;AACJ,GALD;;AAOA,QAAMH,aAAa,GAAGP,aAAa,IAAI;AACnCgB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,QAAIZ,OAAO,GAAG,EAAd;AACA,QAAIa,YAAY,GAAGL,IAAI,CAACM,KAAL,CAAWN,IAAI,CAACE,MAAL,KAAc,GAAzB,CAAnB;;AACA,SAAK,IAAIL,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACV,aAAa,GAAC,CAA9B,EAAiCU,CAAC,EAAlC,EAAsC;AAClC,SAAG;AACCQ,QAAAA,YAAY,GAAGL,IAAI,CAACM,KAAL,CAAWN,IAAI,CAACE,MAAL,KAAc,GAAzB,CAAf;AACH,OAFD,QAESG,YAAY,KAAKjB,MAF1B;;AAIAI,MAAAA,OAAO,CAACe,IAAR,CAAa,MAAC,MAAD;AAAQ,QAAA,EAAE,EAAEF,YAAZ;AAA0B,QAAA,MAAM,EAAEA,YAAlC;AAAgD,QAAA,UAAU,EAAEhB,UAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAb;AACH;;AACDG,IAAAA,OAAO,CAACe,IAAR,CAAa,MAAC,MAAD;AAAQ,MAAA,EAAE,EAAEnB,MAAZ;AAAoB,MAAA,MAAM,EAAEA,MAA5B;AAAoC,MAAA,UAAU,EAAEC,UAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAb;AACAM,IAAAA,YAAY,CAACH,OAAD,CAAZ,CAZmC,CAanC;;AACA,WAAOA,OAAP;AACH,GAfD;;AAgBAW,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAEA,SACI,4BAEKZ,OAFL,CADJ;AAMH,CAzCD;;AA2CA,eAAeP,OAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport Option from './Option'\r\nimport ImageUpload from './ImageUpload'\r\n\r\n//TODO: destructure here\r\nconst Options = ({...props}) => {\r\n    const {optionsAmount, answer, sendAnswer, setNewOptions} = props;\r\n    let {newOptions} = props;\r\n    const [options, setOptions] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setOptions(createOptions(optionsAmount));\r\n        setNewOptions(false);\r\n    }, [newOptions])\r\n\r\n    const shuffleArray = (array) => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n    }\r\n\r\n    const createOptions = optionsAmount => {\r\n        console.log('CREATE OPTIONS');\r\n        let options = [];\r\n        let randomNumber = Math.round(Math.random()*110);\r\n        for (let i=0; i<optionsAmount-1; i++) {\r\n            do {\r\n                randomNumber = Math.round(Math.random()*110);\r\n            } while (randomNumber === answer)\r\n\r\n            options.push(<Option id={randomNumber} answer={randomNumber} sendAnswer={sendAnswer}/>)\r\n        }\r\n        options.push(<Option id={answer} answer={answer} sendAnswer={sendAnswer}/>)\r\n        shuffleArray(options)\r\n        //shuffle options order\r\n        return options\r\n    }\r\n    console.log(\"OPTIONS is Rendering\");\r\n\r\n    return (\r\n        <>\r\n            {/* <ImageUpload pegNumber={3} /> */}\r\n            {options}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Options"]},"metadata":{},"sourceType":"module"}