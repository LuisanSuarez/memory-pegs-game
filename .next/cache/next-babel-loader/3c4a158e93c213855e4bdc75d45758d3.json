{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nvar _jsxFileName = \"C:\\\\Users\\\\luisa\\\\OneDrive\\\\LuisAngel\\\\Code\\\\Memory Pegs\\\\memory-pegs-game\\\\components\\\\OptionEditable.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useReducer, useCallback } from 'react';\nimport ImageUpload from './ImageUpload';\nimport axios from 'axios';\nimport Dropzone from 'react-dropzone';\n\nconst OptionEditable = (_ref) => {\n  let props = _Object$assign({}, _ref);\n\n  const placeholderImage = 'https://apod.nasa.gov/apod/image/2001/22466-22467anaVantuyne900.jpg';\n  const placeholderName = 'add a name to this peg';\n  const {\n    id\n  } = props; //TODO: useReducer?\n\n  const {\n    0: image,\n    1: setImage\n  } = useState(placeholderImage);\n  const {\n    0: pegName,\n    1: setPegName\n  } = useState(placeholderName); //placeholder image\n\n  let pegNumberStr = id.toString();\n  pegNumberStr = id > 99 ? pegNumberStr.slice(1) : pegNumberStr;\n  useEffect(() => {\n    get({\n      \"peg\": pegNumberStr\n    });\n  }, []);\n  const url = 'http://localhost:8000/'; // #################\n  //CLOUDINARY UPLOAD\n  // #################\n  //stolen from: https://codepen.io/team/Cloudinary/pen/QgpyOK\n\n  const cloudName = 'luisan';\n  const unsignedUploadPreset = 'jufwcv6o'; // *********** Upload file to Cloudinary ******************** //\n\n  function uploadFile(file) {\n    var url = `https://api.cloudinary.com/v1_1/${cloudName}/upload`;\n    var xhr = new XMLHttpRequest();\n    var fd = new FormData();\n    xhr.open('POST', url, true);\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest'); //TODO: add a progress bar (you find it in the original codepen link, up top)\n\n    xhr.onreadystatechange = function (e) {\n      if (xhr.readyState == 4 && xhr.status == 200) {\n        var response = JSON.parse(xhr.responseText);\n        var url = response.secure_url;\n        const serverUrl = 'http://localhost:8000/';\n        const data = {\n          peg: id,\n          imageURL: url,\n          pegName: pegName\n        };\n        console.log(\"Data:\", data);\n        axios.put(serverUrl + 'updateData', data).then(res => {\n          //   console.log('AXIOS GET RUNNING:', res);\n          const imageURL = JSON.parse(res.config.data).imageURL;\n          console.log(\"imageURL:\", imageURL);\n          setImage(imageURL); //   console.log(JSON.parse(res.config.data).imageURL);\n          //   console.log('hopefully I\"m refreshing the new image');\n        }).catch(err => {\n          console.log(err);\n        }); // setTimeout(() => {\n        //     get({ \"peg\": pegNumberStr });\n        //     console.log(\"TIMEOUT GET RUNS\");\n        //  }, 10000);\n        // Create a thumbnail of the uploaded image, with 150px width\n        // TODO: use the thumbnail created here to upload that instead of the huge image ;)))\n        // var tokens = url.split('/');\n        // tokens.splice(-2, 0, 'w_150,c_scale');\n      }\n    };\n\n    fd.append('upload_preset', unsignedUploadPreset);\n    fd.append('tags', 'browser_upload'); // Optional - add tag for image admin in Cloudinary\n\n    fd.append('file', file);\n    xhr.send(fd);\n  } // *********** Handle selected files ******************** //\n\n\n  var handleFiles = function (files) {\n    for (var i = 0; i < files.length; i++) {\n      console.log(`this ran ${i} times`);\n      uploadFile(files[i]); // call the function to upload the file\n    }\n  }; // #############\n  //CLOUDINARY UPLOAD END\n  // #############\n  //TODO: refactor as HOCs / 'container component pattern'\n  //TODO: use a container to handle the logic\n\n\n  const get = data => {\n    axios.get(url + 'getImageUrl', {\n      params: data\n    }).then(res => {\n      // console.log(\"From GET():\", res.data.data)\n      setImage(res.data.data[0].imageURL ? res.data.data[0].imageURL : placeholderImage);\n      setPegName(res.data.data[0].pegName ? res.data.data[0].pegName : placeholderName);\n    }).catch(err => {// console.log(\"this is where it's at:\", err)\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(\"we'll post:\", pegName, \"for peg no.\", id);\n    const data = {\n      peg: id,\n      pegName: pegName\n    };\n    axios.put(url + 'updateData', data).then(res => {\n      const pegName = JSON.parse(res.config.data).pegName;\n      console.log(\"pegName:\", pegName);\n      setPegName(pegName);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const handleChange = e => {\n    console.log(e.target.value);\n    setPegName(e.target.value);\n  };\n\n  const uploadAcceptedFiles = acceptedFiles => {\n    console.log(acceptedFiles);\n    console.log(\"we'll run some axios call here to our server our cloudinary\");\n    handleFiles(acceptedFiles);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    class: \"option-card\",\n    onPointerDown: () => \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, __jsx(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n      e.target.blur();\n    },\n    onBlur: e => handleSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    type: \"text\",\n    onChange: e => handleChange(e),\n    name: \"pegName\",\n    value: pegName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  })), __jsx(\"img\", {\n    src: image,\n    style: {\n      height: '100px',\n      width: '100px',\n      border: '2px solid black',\n      background: 'lightgray'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }), __jsx(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, pegNumberStr), __jsx(Dropzone, {\n    onDrop: acceptedFiles => uploadAcceptedFiles(acceptedFiles),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, ({\n    getRootProps,\n    getInputProps\n  }) => __jsx(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, __jsx(\"div\", _extends({}, getRootProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }), __jsx(\"input\", _extends({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  })), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, \"Drag 'n' drop some files here, or click to select files\"))))));\n};\n\nexport default OptionEditable;","map":{"version":3,"sources":["C:/Users/luisa/OneDrive/LuisAngel/Code/Memory Pegs/memory-pegs-game/components/OptionEditable.js"],"names":["React","useState","useEffect","useReducer","useCallback","ImageUpload","axios","Dropzone","OptionEditable","props","placeholderImage","placeholderName","id","image","setImage","pegName","setPegName","pegNumberStr","toString","slice","get","url","cloudName","unsignedUploadPreset","uploadFile","file","xhr","XMLHttpRequest","fd","FormData","open","setRequestHeader","onreadystatechange","e","readyState","status","response","JSON","parse","responseText","secure_url","serverUrl","data","peg","imageURL","console","log","put","then","res","config","catch","err","append","send","handleFiles","files","i","length","params","handleSubmit","preventDefault","handleChange","target","value","uploadAcceptedFiles","acceptedFiles","blur","height","width","border","background","getRootProps","getInputProps"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,WAAjD,QAAoE,OAApE;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,gBAArB;;AAGA,MAAMC,cAAc,GAAG,UAAgB;AAAA,MAAXC,KAAW;;AACnC,QAAMC,gBAAgB,GAAG,qEAAzB;AACA,QAAMC,eAAe,GAAG,wBAAxB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAASH,KAAf,CAHmC,CAInC;;AACA,QAAM;AAAA,OAACI,KAAD;AAAA,OAAQC;AAAR,MAAoBb,QAAQ,CAACS,gBAAD,CAAlC;AACA,QAAM;AAAA,OAACK,OAAD;AAAA,OAAUC;AAAV,MAAwBf,QAAQ,CAACU,eAAD,CAAtC,CANmC,CAOnC;;AACA,MAAIM,YAAY,GAAGL,EAAE,CAACM,QAAH,EAAnB;AAEAD,EAAAA,YAAY,GAAGL,EAAE,GAAC,EAAH,GAAQK,YAAY,CAACE,KAAb,CAAmB,CAAnB,CAAR,GAAgCF,YAA/C;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACZkB,IAAAA,GAAG,CAAC;AAAE,aAAOH;AAAT,KAAD,CAAH;AACH,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAMI,GAAG,GAAG,wBAAZ,CAhBmC,CAkBvC;AACA;AACA;AACA;;AACA,QAAMC,SAAS,GAAG,QAAlB;AACA,QAAMC,oBAAoB,GAAG,UAA7B,CAvBuC,CAyBvC;;AACA,WAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,QAAIJ,GAAG,GAAI,mCAAkCC,SAAU,SAAvD;AACA,QAAII,GAAG,GAAG,IAAIC,cAAJ,EAAV;AACA,QAAIC,EAAE,GAAG,IAAIC,QAAJ,EAAT;AACAH,IAAAA,GAAG,CAACI,IAAJ,CAAS,MAAT,EAAiBT,GAAjB,EAAsB,IAAtB;AACAK,IAAAA,GAAG,CAACK,gBAAJ,CAAqB,kBAArB,EAAyC,gBAAzC,EALsB,CAO1B;;AAEIL,IAAAA,GAAG,CAACM,kBAAJ,GAAyB,UAASC,CAAT,EAAY;AACjC,UAAIP,GAAG,CAACQ,UAAJ,IAAkB,CAAlB,IAAuBR,GAAG,CAACS,MAAJ,IAAc,GAAzC,EAA8C;AAC1C,YAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWZ,GAAG,CAACa,YAAf,CAAf;AACA,YAAIlB,GAAG,GAAGe,QAAQ,CAACI,UAAnB;AACA,cAAMC,SAAS,GAAG,wBAAlB;AACA,cAAMC,IAAI,GAAG;AACTC,UAAAA,GAAG,EAAE/B,EADI;AAETgC,UAAAA,QAAQ,EAAEvB,GAFD;AAGTN,UAAAA,OAAO,EAAEA;AAHA,SAAb;AAKA8B,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBJ,IAArB;AACApC,QAAAA,KAAK,CACAyC,GADL,CACSN,SAAS,GAAC,YADnB,EACiCC,IADjC,EAEKM,IAFL,CAEUC,GAAG,IAAI;AACb;AACE,gBAAML,QAAQ,GAAGP,IAAI,CAACC,KAAL,CAAWW,GAAG,CAACC,MAAJ,CAAWR,IAAtB,EAA4BE,QAA7C;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,QAAzB;AACA9B,UAAAA,QAAQ,CAAC8B,QAAD,CAAR,CAJW,CAKb;AACA;AACC,SATL,EAUKO,KAVL,CAUWC,GAAG,IAAI;AACVP,UAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ;AACH,SAZL,EAV0C,CAuB1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACJ,KAjCD;;AAkCAxB,IAAAA,EAAE,CAACyB,MAAH,CAAU,eAAV,EAA2B9B,oBAA3B;AACAK,IAAAA,EAAE,CAACyB,MAAH,CAAU,MAAV,EAAkB,gBAAlB,EA5CsB,CA4Ce;;AACrCzB,IAAAA,EAAE,CAACyB,MAAH,CAAU,MAAV,EAAkB5B,IAAlB;AACAC,IAAAA,GAAG,CAAC4B,IAAJ,CAAS1B,EAAT;AACH,GAzEsC,CA2EvC;;;AACA,MAAI2B,WAAW,GAAG,UAASC,KAAT,EAAgB;AAC9B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCZ,MAAAA,OAAO,CAACC,GAAR,CAAa,YAAWW,CAAE,QAA1B;AACAjC,MAAAA,UAAU,CAACgC,KAAK,CAACC,CAAD,CAAN,CAAV,CAFmC,CAEb;AACzB;AACJ,GALD,CA5EuC,CAkFvC;AACA;AACA;AAGA;AACA;;;AACA,QAAMrC,GAAG,GAAIsB,IAAD,IAAU;AAClBpC,IAAAA,KAAK,CACJc,GADD,CACKC,GAAG,GAAC,aADT,EACwB;AACpBsC,MAAAA,MAAM,EAAEjB;AADY,KADxB,EAICM,IAJD,CAIMC,GAAG,IAAI;AACT;AACAnC,MAAAA,QAAQ,CAACmC,GAAG,CAACP,IAAJ,CAASA,IAAT,CAAc,CAAd,EAAiBE,QAAjB,GAA4BK,GAAG,CAACP,IAAJ,CAASA,IAAT,CAAc,CAAd,EAAiBE,QAA7C,GAAwDlC,gBAAzD,CAAR;AACQM,MAAAA,UAAU,CAACiC,GAAG,CAACP,IAAJ,CAASA,IAAT,CAAc,CAAd,EAAiB3B,OAAjB,GAA2BkC,GAAG,CAACP,IAAJ,CAASA,IAAT,CAAc,CAAd,EAAiB3B,OAA5C,GAAsDJ,eAAvD,CAAV;AACH,KART,EASSwC,KATT,CASeC,GAAG,IAAI,CACV;AACH,KAXT;AAYC,GAbL;;AAeI,QAAMQ,YAAY,GAAI3B,CAAD,IAAO;AACxBA,IAAAA,CAAC,CAAC4B,cAAF;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B/B,OAA3B,EAAoC,aAApC,EAAmDH,EAAnD;AACA,UAAM8B,IAAI,GAAG;AACTC,MAAAA,GAAG,EAAE/B,EADI;AAETG,MAAAA,OAAO,EAAEA;AAFA,KAAb;AAIAT,IAAAA,KAAK,CACAyC,GADL,CACS1B,GAAG,GAAG,YADf,EAC6BqB,IAD7B,EAEKM,IAFL,CAEUC,GAAG,IAAI;AACT,YAAMlC,OAAO,GAAGsB,IAAI,CAACC,KAAL,CAAWW,GAAG,CAACC,MAAJ,CAAWR,IAAtB,EAA4B3B,OAA5C;AACA8B,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB/B,OAAxB;AACAC,MAAAA,UAAU,CAACD,OAAD,CAAV;AACH,KANL,EAOKoC,KAPL,CAOWC,GAAG,IAAI;AACVP,MAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ;AACH,KATL;AAUH,GAjBD;;AAmBA,QAAMU,YAAY,GAAI7B,CAAD,IAAO;AACxBY,IAAAA,OAAO,CAACC,GAAR,CAAYb,CAAC,CAAC8B,MAAF,CAASC,KAArB;AACAhD,IAAAA,UAAU,CAACiB,CAAC,CAAC8B,MAAF,CAASC,KAAV,CAAV;AACH,GAHD;;AAKA,QAAMC,mBAAmB,GAAIC,aAAD,IAAmB;AAC3CrB,IAAAA,OAAO,CAACC,GAAR,CAAYoB,aAAZ;AACArB,IAAAA,OAAO,CAACC,GAAR,CAAY,6DAAZ;AACAS,IAAAA,WAAW,CAACW,aAAD,CAAX;AACH,GAJD;;AAMA,SACI,4BACI;AAAK,IAAA,KAAK,EAAC,aAAX;AAAyB,IAAA,aAAa,EAAE,MAAM,EAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACQ;AACI,IAAA,QAAQ,EAAEjC,CAAC,IAAI;AAAEA,MAAAA,CAAC,CAAC4B,cAAF;AAAoB5B,MAAAA,CAAC,CAAC8B,MAAF,CAASI,IAAT;AAAkB,KAD3D;AAEI,IAAA,MAAM,EAAElC,CAAC,IAAI2B,YAAY,CAAC3B,CAAD,CAF7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,QAAQ,EAAGA,CAAD,IAAO6B,YAAY,CAAC7B,CAAD,CAFjC;AAGI,IAAA,IAAI,EAAC,SAHT;AAII,IAAA,KAAK,EAAElB,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADR,EAWI;AAAK,IAAA,GAAG,EAAEF,KAAV;AAAiB,IAAA,KAAK,EAAE;AAACuD,MAAAA,MAAM,EAAE,OAAT;AAAkBC,MAAAA,KAAK,EAAE,OAAzB;AAAkCC,MAAAA,MAAM,EAAE,iBAA1C;AAA6DC,MAAAA,UAAU,EAAE;AAAzE,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,EAYI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKtD,YAAL,CAZJ,EAaI,MAAC,QAAD;AAAU,IAAA,MAAM,EAAEiD,aAAa,IAAID,mBAAmB,CAACC,aAAD,CAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAAC;AAACM,IAAAA,YAAD;AAAeC,IAAAA;AAAf,GAAD,KACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,0BAASD,YAAY,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACI,4BAAWC,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAFJ,CADA,CAFR,CAbJ,CADJ,CADJ;AA6BH,CAnKD;;AAqKA,eAAejE,cAAf","sourcesContent":["import React, { useState, useEffect, useReducer, useCallback } from 'react';\r\nimport ImageUpload from './ImageUpload';\r\nimport axios from 'axios';\r\nimport Dropzone from 'react-dropzone';\r\n\r\n\r\nconst OptionEditable = ({...props}) => {\r\n    const placeholderImage = 'https://apod.nasa.gov/apod/image/2001/22466-22467anaVantuyne900.jpg'\r\n    const placeholderName = 'add a name to this peg';\r\n    const { id } = props;\r\n    //TODO: useReducer?\r\n    const [image, setImage] = useState(placeholderImage)\r\n    const [pegName, setPegName] = useState(placeholderName);\r\n    //placeholder image\r\n    let pegNumberStr = id.toString();\r\n\r\n    pegNumberStr = id>99 ? pegNumberStr.slice(1) : pegNumberStr;\r\n\r\n    useEffect(() => {\r\n        get({ \"peg\": pegNumberStr })\r\n    }, [])\r\n\r\n    const url = 'http://localhost:8000/';\r\n\r\n// #################\r\n//CLOUDINARY UPLOAD\r\n// #################\r\n//stolen from: https://codepen.io/team/Cloudinary/pen/QgpyOK\r\nconst cloudName = 'luisan';\r\nconst unsignedUploadPreset = 'jufwcv6o';\r\n\r\n// *********** Upload file to Cloudinary ******************** //\r\nfunction uploadFile(file) {\r\n    var url = `https://api.cloudinary.com/v1_1/${cloudName}/upload`;\r\n    var xhr = new XMLHttpRequest();\r\n    var fd = new FormData();\r\n    xhr.open('POST', url, true);\r\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\r\n\r\n//TODO: add a progress bar (you find it in the original codepen link, up top)\r\n\r\n    xhr.onreadystatechange = function(e) {\r\n        if (xhr.readyState == 4 && xhr.status == 200) {\r\n            var response = JSON.parse(xhr.responseText);\r\n            var url = response.secure_url;\r\n            const serverUrl = 'http://localhost:8000/';\r\n            const data = {\r\n                peg: id,\r\n                imageURL: url,\r\n                pegName: pegName\r\n            }\r\n            console.log(\"Data:\", data);\r\n            axios\r\n                .put(serverUrl+'updateData', data)\r\n                .then(res => {\r\n                //   console.log('AXIOS GET RUNNING:', res);\r\n                  const imageURL = JSON.parse(res.config.data).imageURL;\r\n                  console.log(\"imageURL:\", imageURL);\r\n                  setImage(imageURL)\r\n                //   console.log(JSON.parse(res.config.data).imageURL);\r\n                //   console.log('hopefully I\"m refreshing the new image');\r\n                })\r\n                .catch(err => {\r\n                    console.log(err)\r\n                })\r\n            // setTimeout(() => {\r\n            //     get({ \"peg\": pegNumberStr });\r\n            //     console.log(\"TIMEOUT GET RUNS\");\r\n            //  }, 10000);\r\n            // Create a thumbnail of the uploaded image, with 150px width\r\n            // TODO: use the thumbnail created here to upload that instead of the huge image ;)))\r\n            // var tokens = url.split('/');\r\n            // tokens.splice(-2, 0, 'w_150,c_scale');\r\n        }\r\n    };\r\n    fd.append('upload_preset', unsignedUploadPreset);\r\n    fd.append('tags', 'browser_upload'); // Optional - add tag for image admin in Cloudinary\r\n    fd.append('file', file);\r\n    xhr.send(fd);\r\n}\r\n\r\n// *********** Handle selected files ******************** //\r\nvar handleFiles = function(files) {\r\n    for (var i = 0; i < files.length; i++) {\r\n        console.log(`this ran ${i} times`)\r\n        uploadFile(files[i]); // call the function to upload the file\r\n    }\r\n};\r\n// #############\r\n//CLOUDINARY UPLOAD END\r\n// #############\r\n\r\n\r\n//TODO: refactor as HOCs / 'container component pattern'\r\n//TODO: use a container to handle the logic\r\nconst get = (data) => {\r\n    axios\r\n    .get(url+'getImageUrl', {\r\n        params: data\r\n    })\r\n    .then(res => {\r\n        // console.log(\"From GET():\", res.data.data)\r\n        setImage(res.data.data[0].imageURL ? res.data.data[0].imageURL : placeholderImage)\r\n                setPegName(res.data.data[0].pegName ? res.data.data[0].pegName : placeholderName)\r\n            })\r\n            .catch(err => {\r\n                // console.log(\"this is where it's at:\", err)\r\n            })\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        console.log(\"we'll post:\", pegName, \"for peg no.\", id);\r\n        const data = {\r\n            peg: id,\r\n            pegName: pegName,\r\n        }\r\n        axios\r\n            .put(url + 'updateData', data)\r\n            .then(res => {\r\n                const pegName = JSON.parse(res.config.data).pegName;\r\n                console.log(\"pegName:\", pegName);\r\n                setPegName(pegName)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        console.log(e.target.value);\r\n        setPegName(e.target.value)\r\n    }\r\n\r\n    const uploadAcceptedFiles = (acceptedFiles) => {\r\n        console.log(acceptedFiles)\r\n        console.log(\"we'll run some axios call here to our server our cloudinary\");\r\n        handleFiles(acceptedFiles)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div class=\"option-card\" onPointerDown={() => \"\" }>\r\n                    <form\r\n                        onSubmit={e => { e.preventDefault(); e.target.blur(); }} \r\n                        onBlur={e => handleSubmit(e)}>\r\n                        <input\r\n                            type='text'\r\n                            onChange={(e) => handleChange(e)}\r\n                            name='pegName'\r\n                            value={pegName}\r\n                            />\r\n                    </form>\r\n                <img src={image} style={{height: '100px', width: '100px', border: '2px solid black', background: 'lightgray'}} />\r\n                <h4>{pegNumberStr}</h4>\r\n                <Dropzone onDrop={acceptedFiles => uploadAcceptedFiles(acceptedFiles)}>\r\n                    {({getRootProps, getInputProps}) => (\r\n                        <section>\r\n                        <div {...getRootProps()}>\r\n                            <input {...getInputProps()} />\r\n                            <p>Drag 'n' drop some files here, or click to select files</p>\r\n                        </div>\r\n                        </section>\r\n                    )}\r\n                </Dropzone>\r\n                {/* <ImageUpload peg={id} update={get} pegName={pegName} /> */}\r\n            </div>\r\n        </>\r\n        )\r\n}\r\n\r\nexport default OptionEditable"]},"metadata":{},"sourceType":"module"}